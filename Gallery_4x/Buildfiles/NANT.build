<?xml version="1.0"?>
<!-- targets to be executed, when omitted from command line default is run -->
<project name="Dotnetnuke.Modules.Gallery" default="BuildAndZip">
    <target name="init">
        <property name="nant.settings.currentframework" value="net-2.0" />

        <!-- This is the namespace of the module to comply with Dotnetnuke 

namespaces-->
        <property name="moduleNS" value="Dotnetnuke.Modules" />

        <!-- This is where your packaged zips will build to from within the 

module folder -->
        <property name="package.dir" value="../Packages" overwrite="false" />

        <!-- This is where your resource.zip will be built so it can be zipped and 

distributed with the release install zips -->
        <property name="resourcezip.dir" value="resourceZip" />

        <property name="bin.dir" value="../../bin" />
        <property name="controls.dir" value="controls" />
        <property name="localresource.dir" value="App_LocalResources" />
        <property name="globalresource.dir" value="App_GlobalResources" />

        <!-- This is the package tag for example "Beta1" or "RC1" etc. -->
        <property name="package.tag" value="" />

        <!--This will create a zip with Install, Source or Both (Package)-->
        <property name="binZip" value="${package.tag}_Install" />
        <property name="srcZip" value="${package.tag}_Source" />
        <property name="pckZip" value="${package.tag}_Package" />

        <property name="rootWeb" value="http://localhost/" overwrite="false" />
        <property name="webAlias" value="Dotnetnuke_2" overwrite="false" />
        <property name="verbose" value="true" overwrite="false" />

        <!-- ModuleName value should be set specific to the project -->
        <property name="moduleName" value="Gallery"  overwrite="false"  />
        <property name="subproject.name" value="${moduleNS}.${moduleName}"/>
        <property name="module.dll" value="${bin.dir}/${subproject.name}.dll" />

        <property name="debug" value="false" overwrite="false" />
        <property name="config" value="debug" if="${debug}" />
        <property name="config" value="release" unless="${debug}" />

        <sysinfo />

        <if test="${verbose}">
            <echo message="solutionName: ${subproject.name}" />
            <echo message="debug:        ${debug}" />
            <echo message="config:       ${config}" />
            <echo message="module.dll:   ${module.dll}" />
        </if>

        <!-- set of files to attach when build fails -->
    </target>

    <target name="Compile" depends="init">
        <exec program="${sys.env.windir}\Microsoft.NET\Framework\v3.5

\msbuild.exe" failonerror="true">
            <arg value="..\${subproject.name}.sln" />
            <arg value="/p:Configuration=Release" />
            <arg value="/p:Platform=&quot;Any CPU&quot;" />
        </exec>
    </target>

    <!-- It is important that this target does not run before the Compile target 

since it will lock the assembly -->
    <target name="VersionInfo" depends="Compile" >
        <property name="version"
		    value="${assemblyname::get-version(assembly::get-name(assembly::load

-from-file('../' + module.dll)))}" />
        <regex pattern="^\s*(?'major'\d+)\.(?'minor'\d+)\.(?'build'\d+)\.

(?'revision'\d+)\s*$" input="${version}" />

        <property name="major" value="0${major}"
                     if="${string::get-length(major) == 1}" />
        <property name="minor" value="0${minor}"
		     if="${string::get-length(minor) == 1}" />
        <property name="build" value="0${build}"
                     if="${string::get-length(build) == 1}" />
        <property name="revision" value="0${build}"
		     if="${string::get-length(revision) == 1}" />
        <property name="moduleVersion"

   value="${major}.${minor}.${build}.${revision}" />
        <property name="moduleVersionNoRevision"
		     value="${major}.${minor}.${build}" />

        <if test="${verbose}">
            <echo message="                  major: ${major}" />
            <echo message="                  minor: ${minor}" />
            <echo message="                  build: ${build}" />
            <echo message="               revision: ${revision}" />
            <echo message="          moduleVersion: ${moduleVersion}" />
            <echo message="moduleVersionNoRevision: 

${moduleVersionNoRevision}" />
        </if>

    </target>

    <target name="CleanPackageBin" depends="init,VersionInfo">
        <delete file="${package.dir}/${subproject.name}_${moduleVersion}

_${binZip}.zip" if="${file::exists('${package.dir}/${subproject.name}_${moduleVersion}

_${binZip}.zip')}" />
    </target>

    <target name="CleanPackageSource" depends="init,VersionInfo">
        <delete file="${package.dir}/${subproject.name}_${moduleVersion}

_${srcZip}.zip" if="${file::exists('$${package.dir}/${subproject.name}_${moduleVersion}

_${srcZip}.zip')}" />
    </target>

    <!-- check for resourcezip folder, delete it and its contents if it exists -->
    <target name="CleanResourceZip" depends="init">
        <delete dir="ResourceZip" />
    </target>

    <target name="FinalCleanUp" depends="init">
        <delete dir="ResourceZip" />
    </target>

    <!-- Begin area for creating resourcezip for installable PA zips (should depend 

on target that clears where this will build zip file to)-->
    <target name="CreateResourceZip" depends="CleanResourceZip">
        <!-- create a flat directory to zip for install -->
        <mkdir dir="temp" unless="${directory::exists('temp')}" />
        <!-- DO NOT flatten this as we want to retain folder structure in this 

and ONLY this zip -->
        <copy todir="temp" flatten="false">
            <fileset basedir="../">
                <!-- Tell nant what files to grab -->
                <!-- everything included here ends up in resource.zip, 

this 				           should be excluded in the CreateBinZip -->
                <include name="**/images/*" />
                <include name="**/js/*" />
                <include name="Documentation/${subproject.name}

_${moduleVersionNoRevision}_ReleaseNotes.txt" />
                <include name="Documentation/Contributors.txt" />
                <include name="Documentation/License.txt" />
                <include name="Documentation/Readme.txt" />
                <include name="**/${localresource.dir}/*.resx" />
                <include name="**/${globalresource.dir}/*.resx" />
                <include name="**/${globalresource.dir}/*.xml" />
                <include name="**/*.ascx" />
                <include name="**/*.css" />
                <include name="**/*.aspx" />
                <include name="**/*.js" />
                <include name="**/.htc" />
                <include name="**/_photoMetadata.xml" />

                <exclude name="**/*.cd" />
                <exclude name="**/*.vb" />
                <exclude name="**/Exif/*" />
                <exclude name="**/*.bat" />
                <exclude name="**/*.build" />
                <exclude name="**/Resources.zip" />
                <exclude name="**/Install/**/*" />
                <exclude name="**/_sgbak/*" />
                <exclude name="**/_sgvault/*" />
                <exclude name="**/thumbs.db" />
                <exclude name="**/*.zip" />
            </fileset>
        </copy>

        <mkdir dir="${resourcezip.dir}" unless="${directory::exists

(resourcezip.dir)}" />
        <zip zipfile="${resourcezip.dir}/Resources.zip">
            <fileset basedir="temp">
                <include name="**/*" />
                <exclude name="**/*.dll" />
            </fileset>
        </zip>

        <!--Delete temp directory -->
        <delete dir="temp" failonerror="false" />
    </target>
    <!-- End area for resourcezip creation -->

    <!-- Begin area for creating resourcezip for installable Source zips (should depend on 

target that clears where this will build zip file to)-->
    <target name="CreateResourceSourceZip" depends="CleanResourceZip">
        <!-- create a flat directory to zip for install -->
        <mkdir dir="temp" unless="${directory::exists('temp')}" />
        <!-- DO NOT flatten this as we want to retain folder structure in this 

and ONLY this zip -->
        <copy todir="temp" flatten="false">
            <fileset basedir="../">
                <!-- Tell nant what files to grab -->
                <!-- everything included here ends up in resource.zip, 

this file should be excluded in the CreateSourceZip -->
                <include name="**/images/*" />
                <include name="**/js/*" />
                <include name="Documentation/**" />
                <include name="**/${localresource.dir}/*.resx" />
                <include name="**/${globalresource.dir}/*.resx" />
                <include name="**/${globalresource.dir}/*.xml" />
                <include name="**/*.css" />
                <include name="**/*.ascx" />
                <include name="**/*.aspx" />
                <include name="**/*.vb" />
                <include name="**/*.sln" />
                <include name="**/*.vbproj" />
                <include name="**/*.sqldataprovider" />
                <include name="**/BuildFiles/*.targets" />
                <include name="**/BuildFiles/*.build" />
                <include name="**/BuildFiles/*.bat" />
                <include name="**/*.js" />
                <include name="**/.htc" />
                <include name="**/_photoMetadata.xml" />
                <exclude name="**/Install/**/*" />
                <exclude name="**/_sgbak/*" />
                <exclude name="**/_sgvault/*" />
                <exclude name="**/thumbs.db" />
                <exclude name="**/*.zip" />
                <exclude name="Documentation/Gallery FAQ.doc" />
                <exclude

name="**Documentation/Gallery_03.00.12_ReleaseNotes.txt" />
            </fileset>
        </copy>

        <mkdir dir="${resourcezip.dir}" unless="${directory::exists

(resourcezip.dir)}" />
        <zip zipfile="${resourcezip.dir}/Resources.zip">
            <fileset basedir="temp">
                <include name="**/*" />
                <exclude name="**/*.dll" />

            </fileset>
        </zip>

        <!--Delete temp directory -->
        <delete dir="temp" failonerror="false" />
    </target>
    <!-- End area for resourceSourcezip creation -->


    <!-- Begin area for creating installable PA (should depend on target that clears where 

this will build zip file to AND resourcezip as this is part of installable PA)-->
    <target name="CreateBinZip" depends="CleanPackageBin CreateResourceZip">
        <!-- DO flatten this as we want to retain folder structure in this and 

ONLY this zip -->
        <copy todir="temp" flatten="true">
            <fileset basedir="../">
                <include name="**${resourcezip.dir}/Resources.zip" />
                <include name="${module.dll}" />
                <include name="**/*.SqlDataProvider" />
                <include name="**/*.dnn" />
                <include name="${bin.dir}/Gallery.Exif.dll" />
                <include name="**/${moduleVersionNoRevision}.txt" />
            </fileset>
        </copy>

        <mkdir dir="${package.dir}" unless="${directory::exists(package.dir)}" />
        <zip zipfile="${package.dir}/${subproject.name}_${moduleVersion}

${binZip}.zip">
            <fileset basedir="temp">
                <include name="**/*" />
            </fileset>
        </zip>

        <!--Delete temp directory -->
        <delete dir="temp" failonerror="false" />
    </target>
    <!-- End area for installable PA -->

    <!-- Begin area for distributable source code zip (should depend on target that clears 

where this will build zip file to)-->
    <target name="CreateSrcZip" depends="CleanPackageSource CreateResourceSourceZip">
        <!-- DO flatten this as we want to retain folder structure in this and 

ONLY this zip -->
        <copy todir="temp" flatten="true">
            <fileset basedir="../">
                <include name="**${resourcezip.dir}/Resources.zip" />
                <include name="${module.dll}" />
                <include name="${bin.dir}/Gallery.Exif.dll" />
                <include name="**/*.sqldataprovider" />
                <include name="**/*.dnn" />
                <include name="**/${moduleVersionNoRevision}.txt" />
            </fileset>
        </copy>

        <mkdir dir="${package.dir}" unless="${directory::exists(package.dir)}" />
        <zip zipfile="${package.dir}/${subproject.name}_${moduleVersion}

${srcZip}.zip">
            <fileset basedir="temp">
                <include name="**/*" />
            </fileset>
        </zip>

        <!--Delete temp directory -->
        <delete dir="temp" failonerror="false" />

    </target>

    <!-- End area for distributable source code zip -->

    <!-- Begin area for creating DotNetNuke Module Release Package -->
    <target name="CreateDNNReleasePackage" depends="CreateBinZip CreateSrcZip">
        <copy todir="temp" flatten="true">
            <fileset>
                <include name="${package.dir}/${subproject.name}

_${moduleVersion}${srcZip}.zip" />
                <include name="${package.dir}/${subproject.name}

_${moduleVersion}${binZip}.zip" />
                <include name="../Documentation/${subproject.name}

_${moduleVersionNoRevision}_ReleaseNotes.txt" />
                <include name="../Documentation/${subproject.name}

_${moduleVersionNoRevision}_TestCases.txt" />
            </fileset>
        </copy>

        <mkdir dir="${package.dir}" unless="${directory::exists(package.dir)}" />
        <zip zipfile="${package.dir}/${subproject.name}_${moduleVersion}

${pckZip}.zip">
            <fileset basedir="temp">
                <include name="**/*" />
            </fileset>
        </zip>

        <!--Delete temp directory -->
        <delete dir="temp" failonerror="false" />

    </target>

    <!-- End area for DotNetNuke Release Package -->

    <!--  SYNTHETIC TASKS  -->
    <target name="build" depends="Compile" description="This target compiles the application." />

    <target name="BuildAndZip" 
            depends="build, CreateBinZip, CreateSrcZip, CreateDNNReleasePackage, FinalCleanUp"
            description="This target compiles the application and then creates three zip files: 
	                     - one that only contains the compiled code and runtime files (Install) 
		                 - one that contains the compiled code and source files (Source)
	                     - one that contains both of the above plus ReleaseNotes and TestCases (Package)"
    >
    </target>

</project>
